// Using XOR Operation

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int ans = 0;
        for(int i: nums){
            ans^=i;
        }
        return ans;
    }
}


// 2nd Approach - Using Hashing
class Solution {
    public int singleNonDuplicate(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<>();
        
        for(int i: nums){
            map.put(i,map.getOrDefault(i,0)+1);
        }
        for(int key: map.keySet()){
            if(map.get(key) == 1){
                return key;
            }
        }
        return -1;
    }
}

//Binary Search Approach

class Solution {
    public int singleNonDuplicate(int[] arr) {
       int n = arr.length;
       int low = 1;
       int high = n - 2;
       // Edge cases:
        if (n == 1)
            return arr[0];
        if (arr[0]!= arr[1])
            return arr[0];
        if (arr[n-1]!= arr[n-2])
            return arr[n -1];

        while (low <= high) {
            int mid = (low + high) / 2;

            // If arr[mid] is the single element:
            if (arr[mid]!= arr[mid +1] && arr[mid]!= arr[mid - 1]) {
                return arr[mid];
            }

            // We are in the left:
            if ((mid % 2 == 1 && arr[mid] == arr[mid -1])
                    || (mid % 2 == 0 &&  arr[mid] == arr[mid +1])) {
                // Eliminate the left half:
                low = mid + 1;
            }
            // We are in the right:
            else {
                // Eliminate the right half:
                high = mid - 1;
            }
        }

        // Dummy return statement:
        return -1;
    }
}